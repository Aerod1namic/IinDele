@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using LearningPlatform.Data
@using LearningPlatform.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<PageTitle>Мой профиль</PageTitle>

<h3>Мой профиль</h3>
<div class="container">
    @if (profile == null)
    {
        <p>Загрузка...</p>
    }
    else
    {
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }
        <EditForm Model="profile" FormName="ProfileForm" OnSubmit="SaveProfile" class="mb-4">
            <div class="form-group">
                <label>О себе</label>
                <InputText class="form-control" @bind-Value="profile.About" @oninput="() => LogInputChange()" />
            </div>
            <div class="form-group">
                <label>Могу научить (через запятую)</label>
                <InputText class="form-control" @bind-Value="teachInput" @oninput="() => LogInputChange()" />
            </div>
            <button type="submit" class="btn btn-primary mt-3" disabled="@isSaving">Сохранить</button>
            <button type="button" class="btn btn-secondary mt-3" @onclick="LogFormState">Показать состояние формы</button>
        </EditForm>
        <p><strong>Текущее О себе:</strong> @profile.About</p>
        <p><strong>Текущее Могу научить:</strong> @teachInput</p>
    }
</div>

@code {
    private UserProfile? profile;
    private string? teachInput;
    private string? errorMessage;
    private string? successMessage;
    private bool isSaving;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (userId != null)
            {
                profile = await DbContext.UserProfiles.FirstOrDefaultAsync(p => p.Id == userId);
                if (profile == null)
                {
                    profile = new UserProfile { Id = userId, CanTeach = new List<string>(), WantToLearn = new List<string>() };
                    DbContext.UserProfiles.Add(profile);
                    await DbContext.SaveChangesAsync();
                    Console.WriteLine($"Создан новый профиль для пользователя {userId}");
                }
                teachInput = string.Join(", ", profile.CanTeach);
                Console.WriteLine($"Инициализирован профиль - О себе: {profile.About}, Могу научить: [{string.Join(", ", profile.CanTeach)}], teachInput: {teachInput}");
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private void LogInputChange()
    {
        Console.WriteLine($"Ввод изменен - О себе: {profile?.About}, Могу научить: {teachInput}");
        StateHasChanged();
    }

    private void LogFormState()
    {
        Console.WriteLine($"Текущее состояние формы - О себе: {profile?.About}, Могу научить: {teachInput}");
    }

    private async Task SaveProfile()
    {
        if (profile == null) return;

        Console.WriteLine("Вызван SaveProfile");

        isSaving = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            // Логирование входных данных формы
            Console.WriteLine($"Входные данные формы - О себе: {profile.About}, Могу научить: {teachInput}");

            // Обновление списка CanTeach
            profile.CanTeach = teachInput?.Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim()).ToList() ?? new List<string>();

            // Логирование профиля перед сохранением
            Console.WriteLine($"Профиль перед сохранением - О себе: {profile.About}, Могу научить: [{string.Join(", ", profile.CanTeach)}]");

            // Обновление или добавление профиля
            var existingProfile = await DbContext.UserProfiles.FirstOrDefaultAsync(p => p.Id == profile.Id);
            if (existingProfile == null)
            {
                DbContext.UserProfiles.Add(profile);
                Console.WriteLine($"Добавлен новый профиль для пользователя {profile.Id}");
            }
            else
            {
                existingProfile.About = profile.About;
                existingProfile.CanTeach = profile.CanTeach;
                Console.WriteLine($"Ручное обновление профиля для пользователя {profile.Id}");
            }

            await DbContext.SaveChangesAsync();
            successMessage = "Профиль успешно сохранен!";
            Console.WriteLine($"Профиль сохранен в SQLite для пользователя {profile.Id}. О себе: {profile.About}, Могу научить: [{string.Join(", ", profile.CanTeach)}]");
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при сохранении профиля: {ex.Message}";
            Console.WriteLine($"Исключение SaveProfile: {ex}");
        }
        finally
        {
            isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}